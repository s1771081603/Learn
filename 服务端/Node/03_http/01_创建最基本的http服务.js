/**
 * http模块
 * 
 * 1、什么是 HTTP 模块？
 *    回顾什么是客户端？什么是服务器？
 *    在网络节点中，负责消费资源的电脑叫做客户端，负责对外提供资源的电脑叫做服务器。
 * 
 * http 模块 是 Node.js 官方提供的、用来创建 web 服务器的模块。
 * 通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 web 服务器，从而对外提供 Web 资源服务。
 * 
 * 2、进一步的理解 http 模块的作用
 *    服务器和普通电脑的区别在于，服务器上安装了 web服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件，就能把一台普通的电脑变成 web 服务器。
 * 
 *    在 Node.js 中我们不再需要安装 ISS、Apache 等这些第三方 web 服务器软件。
 *    因为我们可以基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务。
 * 
 * 3、服务器相关概念。
 *    IP地址
 *      IP地址就是互联网上每台计算机的唯一地址，因此IP地址具有唯一性。
 *      如果把“个人电脑”比作“一部电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方IP地址的前提下，才能才能与对应的电脑之间进行数据通信。
 * 
 *      IP地址的格式：通常用“点分十进制”表示成（a.b.c.d）的形式，其中 abcd 都是 0～255 之间的十进制整数。例如：用点分十进制的IP地址（192.168.1.1）。
 *      注意：
 *        互联网中的每台 web 服务器，都有自己的 IP 地址，例如：大家可以在 Windows 的终端中运行 ping www.baidu.com 命令，即可查看百度的IP地址。
 *        开发期间自己的电脑既是一台服务器，又是一台客户端，为了方便测试，可以在自己的浏览器中输入 127.0.0.1 这个 IP 地址，就能把自己的电脑当做一台服务器进行访问了。
 * 
 *    域名和域名服务器
 *      尽管 ip 地址是唯一能够标记网络上的计算机，但ip地址是一串长数字，，不直观，而且不方便记忆，于是人们又发明了另一套字符串行的地址方案，即所谓的域名地址。
 *      ip 地址和域名是对应关系，这份对应关系存放在一种叫做域名服务器的电脑中，使用者必须通过好记的域名来访问对应的服务器，对应的转换工作由域名服务器实现。
 *      因此，域名服务器就是提供 ip 和域名之间转换的服务器。
 * 
 *      注意：
 *        单纯使用 ip 地址，在互联网中的电脑也能够正常运行。但是有了域名的加持，能够让互联网变得更加便捷。
 *        在开发期间，127.0.0.1 对应的是域名 localhost ，他代表的都是我们这台电脑，在使用效果上没有任何区别。
 * 
 *    端口号
 *      计算机中的端口号，就好像生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确的把外卖送到你的手中。
 *      同样的道理，在一台电脑中，可以运行成百上千个 web 服务器，每个 web 服务器都可以对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号可以被准确交给对应 web 服务进行处理。
 *      
 *      注意：
 *        每个端口号不能同时被多个 web 服务器占用。
 *        在实际应用中，URL 中的 80 端口可以被忽略。
 */ 

// 1、导入 http 模块。
const http = require('http');

// 2、创建 web 服务器实例。
const server =  http.createServer()

// 3、为 web 服务器实例绑定 request 事件，监听客户端的请求。
server.on('request', (req, res) => {
  console.log('visit web server');
  /**
   * req 是请求对象
   * 只要服务端接收到客户端的请求，就会调用 server.on 为服务器绑定 request 事件处理函数。
   * 如果想在绑定的时间函数中，访问与客户端相关的数据和属性，就可以通过 req 对象。
   * req.url 是客户端请求的 URL 地址
   * req.method 是客户端请求的类型
   * req.headers 是客户端的请求头
   */
  console.log(req.url, req.method, req.headers);
})

// 4、启动服务器。
server.listen(8003, () => {
  console.log('web server running');
}) 