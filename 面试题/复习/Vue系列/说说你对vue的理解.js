/**一、从历史说起
 * web 的 world wide web 的简称，中文翻译为万维网，我们可以将它规划成如下几个时代来进行理解
 *      1. 石器时代
 *      2. 文明时代
 *      3. 工业时代
 *      4. 百花齐放时代
 */

/**石器时代
 * 石器时代指的是我们的静态网页，可以欣赏一下1997的Apple官网
 * 最早的网页是没有数据库的，可以理解成就是一张可以在网络上浏览的报纸，直到CG技术的出现通过 CGI Perl 运作了一小段代码，
 * 与数据库或文件系统进行交互，如当时 1998 年的 Google 
 */

/**文明时代
 * ASP、JSP、大家应该都不会太陌生，最早出现于 2005 年左右，先后出现了微软的 ASP 和 Java Server Pages[JSP]等技术取代了CGI，
 * 增强了 WEB 与服务器的交互的安全性，其实就是 java + HTML。
 * JSP有一个很大的缺点，就是不太灵活，因为 JSP 是在服务器端执行的，通常返回该用户端的就是一个HTML文本。
 * 我们每次请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的DOM，这也就使我们开发网站的灵活度大打折扣，在这种情况下，
 * 同年，Ajax火了。
 */

/**工业时代
 * 到这里大家就更熟悉了，移动设备的普及，jQuery的出现，以及SPA（single page application 单页面应用）的雏形，
 * Backbone EmberJs AngularJS 这样一批前端框架随之出现，但当时SPA的路不好走，例如SEO问题，
 * SPA过多的页面、复杂场景下 View 的绑定等，都没有很好地处理，经过这几年的飞速发展节约了开发人员大量的精力，
 * 降低了开发者的开发过程的门槛，极大的提升了开发效率和迭代速度，我们可以称之为工业时代。
 */

/**百花齐放时代
 * CSS可编程化
 *      sass、less...
 * 常见的UI框架
 *      bootstrap、leyui...
 * web Font
 * JS框架
 *      vue、react、angular
 * 浏览器功能增强/兼容性框架
 * 功能扩展框架...
 */

/**二、vue是什么
 * Vue 是一种用于创建用户界面的开源JavaScript框架，也是一个创业单页应用的web应用框架。
 * 2016年一项针对JavaScript的调查表明，vue有着89%的开发者满意度。
 * 在GitHub上，该项目平均每天都能收获95颗星，为GitHub有史以来星标数第三多的项目，
 * 同时也是一款流行的JavaScript前端框架，旨在更好的组织与简化web开发。vue所关注的核心是MVC模式中的视图层，
 * 同时它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互
 */

/**Vue核心特征
 * 数据驱动（MVVM）
 * MVVM 表示的是 Model-View-ViewModel
 *      Model：模型层，负责处理业务逻辑以及和服务器进行交互。
 *      View：视图层，负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面。
 *      ViewModel：视图模型层，用来连接Model和View，是Model和View的通信桥梁。
 * 
 * 组件化
 * 1.什么是组件化
 *      一句话来说就是把图形、非图形的各种逻辑都抽象为一个统一的概念（组件）来实现开发的模式，
 *      在 vue 中每一个 .vue 的文件都可以视为一个组件
 * 2.组件化的优势
 *      1.降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，
 *      例如输入框，可以替换为日历、时间、范围等组件作为具体的实现。
 *      2.调试方便，由于整个系统都是通过组件组合起来的，再出现问题的时候，可以用排除法直接移除组件，
 *      或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间的低耦合，职责单一，所以逻辑会比分析整个系统要简单。
 *      3.提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的没所以对代码进行优化可获得系统的整体升级。
 * 
 * 指令系统
 * 解释：指令（directives）是带有v-前缀的特殊属性
 * 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用与DOM
 * 常用的指令：
 *      1.条件渲染 v-if
 *      2.列表渲染 v-for
 *      3.属性绑定 v-bind
 *      4.事件绑定 v-on
 *      5.双向数据绑定 v-model
 * 没有指令之前我们是怎么做的？是不是先要获取到DOM然后在....干点啥
 */

/**四、vue跟传统开发的区别
 * 没有落地使用场景的革命不是好革命，就以一个高频的应用场景来示意吧。
 * 注册账号这个需求大家应该都熟悉吧。
 *  填写手机号->输入手机验证码->设置密码->完成。
 * 
 * 用jQuery来实现大概的思路是选择流程的dom对象，点击按钮隐藏当前活动流程dom对象，
 * 显示下一流程dom对象。
 * 
 * 用vue来实现，我们知道vue基本不操作dom节点，双向绑定是dom节点跟视图绑定后，通过修改变量的值控制dom节点的各个属性。
 * 其实现思路为：视图层使用变量控制dom节点是否显示，点击按钮改变该变量。
 * 
 * 总结：
 *      1. vue 的所有界面事件，都是只去操作数据，jQuery操作DOM。
 *      2. vue 的所有界面变动，都是根据数据自动绑定出来的，jQuery操作DOM。
 */

/**五、vue 和 react 对比
 * 相同点：
 *      1.都有组件化思想
 *      2.都支持服务端渲染
 *      3.都有virtual DOM（虚拟DOM）
 *      4.数据驱动视图
 *      5.都支持native方案：vue的weex、react的 react native。
 *      6.都有自己的构建工具：vue的vue-cli、react的create react app。
 * 区别：
 *      1.数据变化的实现原理不同。react使用的是不可变数据，而vue使用的是可变数据。
 *      2.组件化通信不同。react中我们通过使用回电函数来进行通信，而vue中子组件向父组件传递消息的方式有两种：事件和回调函数。
 *      3.diff算法不同。react主要是用diff队列保存需要更新哪些DOM，得到patch树，在统一操作批量跟新DOM。Vue使用双向指针，边对比边更新DOM。
 */